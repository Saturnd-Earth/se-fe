[{"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/index.js":"1","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/App.js":"2","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Login/Login.js":"3","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Make_Post.js":"4","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/SignUp/SignUp.js":"5","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Header/Header.js":"6","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Feed/Feed.js":"7","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Header/Header_Top_Button.js":"8","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Header/Header_Bottom_Button.js":"9","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/requests.js":"10","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Post/Post.js":"11","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Your_Posts/Your_Posts.js":"12","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/mapActions.js":"13","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Post_Forms/Comment.js":"14","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Post_Forms/Video.js":"15","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Post_Forms/Image.js":"16","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/helperFx.js":"17","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Splash/Splash.js":"18"},{"size":719,"mtime":1610474165113,"results":"19","hashOfConfig":"20"},{"size":1882,"mtime":1610502727125,"results":"21","hashOfConfig":"20"},{"size":1624,"mtime":1610502604260,"results":"22","hashOfConfig":"20"},{"size":3992,"mtime":1610502825446,"results":"23","hashOfConfig":"20"},{"size":1642,"mtime":1610499555953,"results":"24","hashOfConfig":"20"},{"size":649,"mtime":1610502604259,"results":"25","hashOfConfig":"20"},{"size":3246,"mtime":1610502811072,"results":"26","hashOfConfig":"20"},{"size":1718,"mtime":1610502604260,"results":"27","hashOfConfig":"20"},{"size":1557,"mtime":1610401510873,"results":"28","hashOfConfig":"20"},{"size":3382,"mtime":1610502599905,"results":"29","hashOfConfig":"20"},{"size":5492,"mtime":1610502885060,"results":"30","hashOfConfig":"20"},{"size":1313,"mtime":1610502599904,"results":"31","hashOfConfig":"20"},{"size":2688,"mtime":1610499555953,"results":"32","hashOfConfig":"20"},{"size":490,"mtime":1610401510875,"results":"33","hashOfConfig":"20"},{"size":947,"mtime":1610401510875,"results":"34","hashOfConfig":"20"},{"size":947,"mtime":1610401510875,"results":"35","hashOfConfig":"20"},{"size":1349,"mtime":1610401510881,"results":"36","hashOfConfig":"20"},{"size":1143,"mtime":1610499555953,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qxqqdo",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/index.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/App.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Login/Login.js",["80"],"import React from 'react'\nimport { showMap } from '../mapActions.js'\nimport { useHistory } from 'react-router-dom'\nimport { USER_LOGIN } from '../requests';\nimport '../Scss/base.scss';\n\nfunction Login() {\n  let input = {\n    password: '',\n    username: ''\n  }\n  let history = useHistory();\n  let handleInput = (e) => {\n    input[e.target.name] = e.target.value\n  }\n\n  let login = (e) => {\n    e.preventDefault();\n    showMap()\n    history.push('/')\n  }\n\n  return (\n    <section className='sign-up-section'>\n      <form className='sign-up-login-form'>\n        <input\n          type=\"text\"\n          placeholder=\"username\"\n          name=\"username\"\n          className=\"sign-up-loging-input\"\n          onInput={handleInput}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          name=\"password\"\n          className=\"sign-up-loging-input password\"\n          onInput={handleInput}\n        />\n        <input\n          type=\"submit\"\n          placeholder=\"register\"\n          className=\"sumbit-loging\"\n          onClick={login}\n          value=\"Login\"\n        />\n      </form>\n    </section>\n  )\n}\n\nexport default Login;\n",["81","82"],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Make_Post.js",["83","84"],"import Comment from './Post_Forms/Comment.js';\nimport Image from './Post_Forms/Image.js';\nimport Video from './Post_Forms/Video.js';\nimport React, { useState } from 'react';\nimport '../Scss/base.scss';\nimport { showMap } from '../mapActions.js'\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from '@apollo/client';\nimport { CREATE_POST } from '../requests.js';\n\nimport commentIcon from '../images/add-comment-white.png'\nimport imageIcon from '../images/add-img-white.png'\nimport loading from '../images/loading.png';\nimport videoIcon from '../images/add-vid-white.png'\n\nconst Make_Post = (props) => {\n  const [input, setInput] = useState({});\n  const [commentInput, setCommentInput] = useState(() => () => <Comment setInput={setInput}/>);\n  const [commentInputNum, setCommentInputNum] = useState(1);\n  const history = useHistory();\n  const [sendPost] = useMutation(CREATE_POST);\n  const [loadingPos, setLoadingPos] = useState(false)\n\n  const post = async () => {\n      setLoadingPos(true)\n      window.navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          setLoadingPos(false)\n          sendPost({\n            variables: {\n              userId: 19,\n              text: input.text,\n              latitude: pos.coords.latitude,\n              longitude: pos.coords.longitude,\n              url: input.url || null,\n              postType: input.postType\n            }\n          })\n          .then( () => {\n            showMap()\n            history.push('/')\n          })\n        },\n        (err) => {\n          console.log('BAD GEOLOCATOR ' + err)\n        }\n    )\n  }\n\n\nlet onClickCallBack = props.userData.id === null ? () => {\n  return <button\n          className={'make-post-button2'}\n          disabled={loadingPos}\n          disabled= {true}\n        >\n          Please Sign In To Make A Post\n        </button>\n} : () => {\n  return <button\n          className={!loadingPos ? 'make-post-button' : 'make-post-button2'}\n          disabled={loadingPos}\n          onClick={() => post()}\n        >\n          Post\n        </button>\n}; \n\n  return (\n    <section className='make-post-section'>\n      <h4 className='make-post-text'>\n        Start Your Ring By Making A Post Here\n      </h4>\n      <div className=\"tab\">\n        <button\n          className={\"tab-links\" + (commentInputNum === 1 ? \"-selected\" : \"\")}\n          onClick={() => {\n            setCommentInput(() => () => <Comment setInput={setInput}/>)\n            setCommentInputNum(1)\n          }}\n        >\n          <img src={commentIcon}\n            alt='Leave a comment'\n            className='icons make-post-comment'\n            label=\"Add comment\"\n          />\n          Add Comment\n        </button>\n        <button\n          className={\"tab-links\" + (commentInputNum === 2 ? \"-selected\" : \"\")}\n          onClick={() => {\n            setCommentInput(() => () => <Image setInput={setInput}/>)\n            setCommentInputNum(2)\n          }}\n        >\n          <img\n            alt='Link a Video'\n            src={imageIcon}\n            className='icons'\n            label=\"link image\"\n          />\n          Link Image\n        </button>\n        <button\n          className={\"tab-links\" + (commentInputNum === 3 ? \"-selected\" : \"\")}\n          onClick={() => {\n            setCommentInput(() => () => <Video setInput={setInput} input={input}/>)\n            setCommentInputNum(3)\n          }}\n        >\n          <img\n            alt='Link a Video'\n            src={videoIcon}\n            className='icons make-post-video'\n            label=\"link video\"\n          />\n          Link Video\n        </button>\n      </div>\n      <div className='make-post-input'>\n        <div className={`post-overlay ${loadingPos ? '' : 'hidden'}`}>\n          <img className='spin loading' alt='Submitting your post' src={loading}></img>\n        </div>\n        {commentInput()}\n      </div>\n      {onClickCallBack()}\n    </section>\n  )\n}\n\nexport default Make_Post;\n","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/SignUp/SignUp.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Header/Header.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Feed/Feed.js",["85"],"import { addLike, addRing, removeAllLikes, removeAllRings } from '../mapActions.js';\nimport { cycleIndex } from '../helperFx.js'\nimport { GET_ALL_POSTS } from '../requests.js';\nimport { useQuery } from '@apollo/client';\nimport { Post } from '../Post/Post.js';\nimport React, { useState } from 'react';\nimport '../Scss/base.scss';\nimport prev from '../images/prev-mixed.png'\nimport next from '../images/next-mixed.png'\n\nexport default function Feed(props) {\n    let {loading, error, data } = useQuery(GET_ALL_POSTS);\n    let [earthMapIsLoaded, setEarthMapIsLoaded] = useState(window.earthMap !== undefined)\n    let [needNewRing, setNeedNewRing] = useState(true)\n    let [postIndex, setPostIndex] = useState(0)\n\n    if (loading) return <h1>LOADING POSTS...</h1>\n    if (error) return <h1>Hmm... something went wrong.</h1>\n\n    let { content, createdAt, id, likes, latitude, longitude, ringMinMax } = data.posts[postIndex]\n    let [min, max] = ringMinMax.slice(1, -1).split(', ').map( char => +char )\n    let center = {lat: () => latitude, lng: () => longitude}\n\n    console.log(data)\n    if (needNewRing && earthMapIsLoaded) {\n      removeAllRings()\n      window.earthMap.setZoom(10)\n      window.earthMap.setCenter({lat: latitude, lng: longitude})\n      addRing( center, min, max )\n      setNeedNewRing(false)\n\n      removeAllLikes()\n      likes.forEach( like => {\n        console.log(like)\n        let center = {lat: latitude, lng: longitude}\n        addLike( center )\n      })\n\n    } else if (!earthMapIsLoaded) {\n      window.setTimeout( () => setEarthMapIsLoaded(window.earthMap !== undefined), 100)\n    }\n\n    return (\n        <section className='feed'>\n            <h1 className='header-title'>{props.headerTitle}</h1>\n            <Post \n              userData= {props.userData} \n              center={center} \n              content={content} \n              createdAt={createdAt} \n              id={id} \n              likes={likes} \n              userId={19} \n              ring={[min, max]}\n            />\n            <section className=\"next-previous-section\">\n              <button\n                className='buttons'\n                id=\"previous-button\"\n                onClick={ () => {\n                  setNeedNewRing(true)\n                  setPostIndex( cycleIndex( postIndex, data.posts.length, -1 ))\n                }}\n              >\n                <img\n                    src={prev}\n                    alt='previous arrow'\n                    label='previous arrow'\n                    className='logon-icons'\n                />\n                Previous\n              </button>\n              <button\n                className='buttons'\n                id=\"next-button\"\n                onClick={ () => {\n                  setNeedNewRing(true)\n                  setPostIndex( cycleIndex( postIndex, data.posts.length, 1 ))\n                }}\n              >\n                Next\n                <img\n                    src={next}\n                    alt='previous arrow'\n                    label='previous arrow'\n                    className='logon-icons'\n                />\n              </button>\n            </section>\n        </section>\n    )\n}\n","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Header/Header_Top_Button.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Header/Header_Bottom_Button.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/requests.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Post/Post.js",["86"],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Your_Posts/Your_Posts.js",["87","88"],"import { GET_USER_POSTS } from '../requests.js'\nimport React, { useState } from 'react';\nimport '../Scss/base.scss';\nimport { useQuery } from '@apollo/client';\nimport { Post } from '../Post/Post.js';\n\nexport default function YourPosts(props) {\n    let {loading, error, data } = useQuery(GET_USER_POSTS, {\n        variables: { userId: 19 },\n    })\n    if (loading) return <h1>LOADING POSTS...</h1>\n    if (error) return <h1>Hmm... something went wrong.</h1>\n    return (\n        <section>\n            <h1 className='header-title'>{props.headerTitle}</h1>\n            {\n                data.postsByUser.map(i => {\n                    let { content, createdAt, id, ringMinMax } = i;\n                    console.log(i)\n                    return (\n                        <Post\n                        myPostsPage={true}\n                        content={i.text}\n                        createdAt={i.createdAt}\n                        id={i.id}\n                        ring={[i.min, i.max]}\n                        icon={props.icon}\n                        latitude={i.latitude}\n                        longitude={i.longitude}\n                        url={i.url}\n                        postType={i.postType}\n                        />\n                    )\n                })\n            }\n        </section>\n    )\n}\n","/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/mapActions.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Post_Forms/Comment.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Post_Forms/Video.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Make_Post/Post_Forms/Image.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/helperFx.js",[],"/Users/Christopher/Coding/Learning/Turing/mod4/schoolwork/se-fe/src/Splash/Splash.js",["89","90","91","92","93","94"],"import { GET_ALL_POSTS } from '../requests.js'\nimport { addRing, hideMap, removeAllLikes, removeAllRings, setZoomToMaxDisplay, shrinkToHalf, showMap, spreadToFull  } from '../mapActions.js'\nimport loadingImg from '../images/loading.png';\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nexport default function Splash(props) {\n  let {loading, error, data} = useQuery(GET_ALL_POSTS)\n\n  useEffect( () => {\n    spreadToFull()\n    return shrinkToHalf\n  })\n\n  if (window.earthMap) {\n    hideMap()\n    window.earthMap.setMapTypeId('satellite');\n    window.earthMap.setZoom(3.5\n    )\n  }\n\n  if (loading) {\n    return <img className='spin' alt='Updating the Post' src={loadingImg}></img>\n  }\n  showMap()\n  removeAllRings()\n  removeAllLikes()\n  setZoomToMaxDisplay()\n  data.posts.forEach( post => {\n    let { content, createdAt, id, likes, latitude, longitude, ringMinMax } = post\n    let [min, max] = ringMinMax.slice(1, -1).split(', ')\n    let center = {lat: () => latitude, lng: () => longitude}\n    addRing( center, min, max )\n  });\n\n  return (\n    <h1 className='hidden'>Sneaky Easter Egg</h1>\n  )\n}\n",{"ruleId":"95","severity":1,"message":"96","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":20},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"95","severity":1,"message":"103","line":23,"column":20,"nodeType":"97","messageId":"98","endLine":23,"endColumn":31},{"ruleId":"104","severity":1,"message":"105","line":56,"column":11,"nodeType":"106","endLine":56,"endColumn":27},{"ruleId":"95","severity":1,"message":"107","line":20,"column":11,"nodeType":"97","messageId":"98","endLine":20,"endColumn":18},{"ruleId":null,"fatal":true,"severity":2,"message":"108","line":18,"column":8},{"ruleId":"95","severity":1,"message":"109","line":2,"column":17,"nodeType":"97","messageId":"98","endLine":2,"endColumn":25},{"ruleId":"95","severity":1,"message":"110","line":18,"column":51,"nodeType":"97","messageId":"98","endLine":18,"endColumn":61},{"ruleId":"95","severity":1,"message":"109","line":4,"column":17,"nodeType":"97","messageId":"98","endLine":4,"endColumn":25},{"ruleId":"95","severity":1,"message":"111","line":8,"column":17,"nodeType":"97","messageId":"98","endLine":8,"endColumn":22},{"ruleId":"95","severity":1,"message":"107","line":30,"column":11,"nodeType":"97","messageId":"98","endLine":30,"endColumn":18},{"ruleId":"95","severity":1,"message":"112","line":30,"column":20,"nodeType":"97","messageId":"98","endLine":30,"endColumn":29},{"ruleId":"95","severity":1,"message":"113","line":30,"column":31,"nodeType":"97","messageId":"98","endLine":30,"endColumn":33},{"ruleId":"95","severity":1,"message":"114","line":30,"column":35,"nodeType":"97","messageId":"98","endLine":30,"endColumn":40},"no-unused-vars","'USER_LOGIN' is defined but never used.","Identifier","unusedVar","no-native-reassign",["115"],"no-negated-in-lhs",["116"],"'setSignedIn' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'content' is assigned a value but never used.","Parsing error: Identifier 'isLiked' has already been declared\n\n\u001b[0m \u001b[90m 16 | \u001b[39m    let [destroyLike] \u001b[33m=\u001b[39m useMutation(\u001b[33mDESTROY_LIKE\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 18 | \u001b[39m  let [isLiked\u001b[33m,\u001b[39m setIsLiked] \u001b[33m=\u001b[39m useState(\u001b[36mfalse\u001b[39m)\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 | \u001b[39m  let [loadingPos\u001b[33m,\u001b[39m setLoadingPos] \u001b[33m=\u001b[39m useState(\u001b[36mfalse\u001b[39m)\u001b[0m\n\u001b[0m \u001b[90m 20 | \u001b[39m  let [sendNewLike] \u001b[33m=\u001b[39m useMutation(\u001b[33mCREATE_LIKE\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 | \u001b[39m  let [destroyLike] \u001b[33m=\u001b[39m useMutation(\u001b[33mDESTROY_LIKE\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m","'useState' is defined but never used.","'ringMinMax' is assigned a value but never used.","'error' is assigned a value but never used.","'createdAt' is assigned a value but never used.","'id' is assigned a value but never used.","'likes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]